#!/usr/bin/env python3

import os, sys, socket, subprocess

MUSIC = '/slack/music'
HOSTNAME = socket.gethostname()
METADATA_EXPORT = '/slack/scrapbook/config/quodlibet/metadata.' + HOSTNAME + '.tsv'

if HOSTNAME == 'schtube':
    METADATA_IMPORT = METADATA_EXPORT.replace(HOSTNAME, 'ocelot')
else:
    METADATA_IMPORT = METADATA_EXPORT.replace(HOSTNAME, 'schtube')

def status(message):
    print(' \033[1;32m>\033[0m \033[1;37m%s\033[0m' % message)

def ask(message, default=True):
    if default:
        reply = input(' \033[0;33m> \033[1;33m%s \033[0;33m[Y/n]\033[0m ' % message).lower()
        return not len(reply) or reply[0] != 'n'
    else:
        reply = input(' \033[0;33m> \033[1;33m%s \033[0;33m[y/N]\033[0m ' % message).lower()
        return len(reply) and reply[0] == 'y'

last_file = None
def log(file, message):
    global last_file

    if not last_file or file != last_file:
        print('   \033[1;35m> \033[1;36m%s\033[0m' % file.replace(MUSIC + '/', ''))
        last_file = file

    print('     - \033[1;35m%s\033[0m' % message)

### Init

ql_args = ''
if os.system('ql running >/dev/null') == 0:
    if 'playing' in subprocess.getoutput('quodlibet --status'):
        ql_args = '--play'

    os.system('ql quit')

from quodlibet._init import init
init()

import quodlibet.library
library = quodlibet.library.init(os.path.join(quodlibet.get_user_dir(), 'songs'))

### Import metadata

if os.path.exists(METADATA_IMPORT):
    status('Importing metadata...')

    changes = False
    for line in open(METADATA_IMPORT):
        filename, mtime, added, rating, playcount, skipcount = line.strip().split('\t')

        song = library.get_filename(MUSIC + '/' + filename)
        if not song:
            log(filename, '\033[1;31mNot found!\033[0m')
            continue

        added = min(song['~#added'], float(added))
        if added != song['~#added']:
            log(filename, 'added: %f -> %f' % (song['~#added'], added))
            song['~#added'] = added
            changes = True

        old_rating = round(song.get('~#rating', -1), 1)
        rating = round(float(rating), 1)
        if rating >= 0 and rating != old_rating:
            log(filename, '\033[1;32mrating: %.1f -> %.1f' % (old_rating, rating))
            if old_rating == -1 or ask('%s rating from %.1f to %.1f?' % ('Raise' if rating > old_rating else 'Lower', old_rating, rating), default=(HOSTNAME == 'ocelot')):
                song['~#rating'] = rating
                changes = True

        old_playcount = song.get('~#playcount', 0)
        playcount = max(old_playcount, int(playcount))
        if playcount > 0 and playcount != old_playcount:
            log(filename, 'playcount: %d -> %d' % (old_playcount, playcount))
            song['~#playcount'] = playcount
            changes = True

        old_skipcount = song.get('~#skipcount', 0)
        skipcount = max(old_skipcount, int(skipcount))
        if skipcount > 0 and skipcount != old_skipcount:
            log(filename, 'skipcount: %d -> %d' % (old_skipcount, skipcount))
            song['~#skipcount'] = skipcount
            changes = True

    if changes and ask('Save changes?'):
        status('Saving...')
        library.save()

### Export metadata

status('Exporting metadata...')

with open(METADATA_EXPORT, 'w') as metadata:
    for song in library:
        metadata.write('\t'.join(map(str, [
            song['~filename'].replace(MUSIC + '/', ''),
            song['~#mtime'],
            song['~#added'],
            round(song.get('~#rating', -1), 1),
            song.get('~#playcount', 0),
            song.get('~#skipcount', 0)
        ])) + '\n')

### Export playlists

os.system(f'sync-ql-playlists {ql_args}')
