#!/bin/bash
# vim: foldmethod=marker

### usage {{{

function usage {
  echo "Usage: $( basename "$0" ) [options] COMMAND [args]"
  echo
  echo "Options:"
  echo "  -f, --force               Assume yes for all questions"
  echo "  -v, --verbose             Increase verbosity"
  echo "  -q, --quiet               Suppress all normal output"
  echo "  -n, --dry-run             Only show changes, without performing them"
  echo "      --path                Show path to the dotfiles repository and exit"
  echo
  echo "Commands:"
  echo "  init                      Install symlinks for all dotfiles interactively"
  echo "  install PATH...           Install symlink for PATH"
  echo "  add PATH...               Add file to repository and replace it with a symlink"
  echo "  sync                      Pull, commit and push"
  echo "  commit-all, ca            Commit all changes"
  echo "  pull, up                  Pull remote changes and checkout submodules"
  echo "  push                      Push local changes"
  echo
  echo "  list [NAME]               List submodules"
  echo "  update [NAME]             Update submodule"
  echo "  update-all, sup [NAME]    Update all submodules"
  echo
  echo "  build PATH COMMAND..      Run build command in path"
  echo "  build-all                 Run default builds"
  echo
  echo "  package, pkg [:TYPE]      Install default packages"
  echo "  pkg LIST[:TYPE]           Install packages from list"
  echo "  pkg up, pkg TYPE          Update packages"
  echo
  echo "  dconf load [KEY]          Load custom dconf settings"
  echo "  dconf dump [KEY]          Dump custom dconf settings"
  echo
  echo "Other arguments:"
  echo "  COMMAND [ARGS]...         Excecute a Git command inside the dotfiles repository"
  echo "  git COMMAND [ARGS]..."
  echo

  exit 255
}

### }}}

### output helpers {{{

# Helpers to check active toggles
function force   { [ "$FORCE"   = 1 ]; }
function verbose { [ "$VERBOSE" = 1 ]; }
function quiet   { [ "$QUIET"   = 1 ]; }
function dryrun  { [ "$DRYRUN"  = 1 ]; }

# Output a string
function output {
  local output="$1"
  local echo_options="$2"

  if verbose || ! quiet; then
    echo -e "$echo_options" "$output"
  fi
}

# Output a message with a colored arrow in front
function msg {
  local message="${1/$HOME/~}"
  local color=${2:-4}
  local echo_options="$3"

  if verbose || ! quiet || [ "$color" = 1 ]; then
    if [ -n "$message" ]; then
      echo -e "$echo_options" " \e[1;3${color}m>\e[0m $message" | sed -r 's/\{\{/\o033[1m/g' | sed -r 's/\}\}/\o033[0m/g'
    else
      echo -e "$echo_options"
    fi
  fi
}

# Helpers for colored messages
function status  { msg "$1" "${2:-2}"; }
function warning { msg "$1" "${2:-3}"; }

# Output error message
function error {
  STATUS=1
  msg "$1" 1
}

# Output error message and exit
function abort {
  [ -n "$1" ] && error "$@"
  exit 1
}

# Ask a yes/no question, defaulting to no
function ask {
  [ "$FORCE" = 1 ] && return

  msg "$1 [y/N] " "${2:-6}" -n >&2
  read -r
  [ "${REPLY:0:1}" = "Y" ] || [ "${REPLY:0:1}" = "y" ]
}

# Ask a yes/no question, defaulting to yes
function ask-yes {
  [ "$FORCE" = 1 ] && return

  msg "$1 [Y/n] " "$2" -n >&2
  read -r
  [ "${REPLY:0:1}" != "N" ] && [ "${REPLY:0:1}" != "n" ]
}

# Ask to continue or abort
function ask-abort {
  STATUS=1
  if ! ask "Do you want to continue?" 1; then
    abort
  fi
}

### }}}
### command helpers {{{

# Run a shell command
function system {
  unset sudo
  local command="$1"
  shift

  # Check for commands that require sudo
  if [ "$command" = "chown" ] || [ "$command" = "chgrp" ]; then
    warning "Using [1;33msudo[0m for command [1m$command[0m"
    sudo="sudo"
  else
    # Check for paths that require sudo
    for arg in "$@"; do
      local dir=$( dirname -- "$arg" )
      if [ "$dir" != "." ] && [ -d "$dir" ] && [ ! -w "$dir" ]; then
        warning "Using [1;33msudo[0m for directory {{$dir}}"
        sudo="sudo"
        break
      fi
    done
  fi

  verbose && output "     executing: $command $* $( dryrun-message )" >&2
  dryrun && return

  command $sudo "$command" "$@"
}

# Run a Git command
function git {
  if [ "$1" = "ignore-errors" ]; then
    local onerror=":"
    shift
  else
    local onerror="ask-abort"
  fi

  verbose && output "     executing: git $* $( dryrun-message )" >&2
  dryrun && return

  # Spawn a subshell so we can run the command inside the repository
  # without any nasty side-effects
  ( cd "$DOTFILES" || abort; command git "$@" )
  local status=$?
  [ $status -eq 0 ] || $onerror

  return $status
}

# Helper to decorate dry-run output
function dryrun-message {
  dryrun && output "[DRY RUN]"
}

# Run a command in a tmux pane if possible
function mux-wrap {
  if [ -n "$TMUX" ]; then
    system mux -b -d -w "$@"
  else
    system "$@"
  fi
}

# Load the users' SSH key if necessary
function load-key {
  local key=~/.ssh/id_rsa
  if [ -f "$key" ] && [ "$( uname -s )" != "Darwin" ]; then
    ssh-add -l | grep -Fq "/.ssh/id_rsa (RSA)" || ssh-add "$key" </dev/null
  fi
}

### }}}
### dotfiles helpers {{{

# Make sure the given path is either inside the home directory,
# or a valid /etc path
function validate {
  if ! [[ "$1" =~ ^($HOME|(/private|/usr/local)?/etc)($|/) ]]; then
    error "Path is not inside \$HOME or /etc: {{$1}}"
    return 1
  else
    return 0
  fi
}

# Transform a filesystem path into a repository path
function target {
  local origin="$1"

  if [[ "$origin" =~ ^$HOME/ ]]; then
    local target="${1:${#HOME}+1}"
  elif [[ "$origin" =~ ^/private/etc/ ]]; then
    local target="${1:8}"
  elif [[ "$origin" =~ ^/usr/local/etc/ ]]; then
    local target="${1:10}"
  elif [[ "$origin" =~ ^/etc/ ]]; then
    local target="${1:1}"
  else
    local target="$origin"
  fi

  echo "$DOTFILES/${target#.}"
}

# Transform a repository path into a filesystem path
function origin {
  local target="${1:${#DOTFILES}+1}"
  local topdir="${target%%/*}"

  if [ "$topdir" = "etc" ] || [ "$topdir" = "private" ]; then
    echo "/$target"
  elif [ -e "$HOME/$topdir" ]; then
    echo "$HOME/$target"
  else
    echo "$HOME/.$target"
  fi
}

### }}}

function run {
  local command="$1"
  shift

  case "$command" in
    init) # {{{
      function install-paths {
        for path in "$@"; do
          if [ ! -e "$path" ] || [ "$( basename "$path" )" = "README.md" ]; then
            continue
          fi

          if [ ! -d "$path" ] || [ -L "$path" ] || [ -e "$path/.install" ]; then
            run install "$path"
          elif [ -e "$path/.skip" ]; then
            continue
          elif [ -d "$path" ] && [ ! -e "$path/.git" ] && [ ! -L "$path" ]; then
            install-paths "$path"/*
          fi
        done
      }

      output
      install-paths "$DOTFILES"/*
      run package
      output
      ;;
    # }}}
    install) # {{{
      [ $# -eq 0 ] && usage

      for path in "$@"; do
        local origin="$path"
        local target=$( target "$origin" )
        local force=0

        if [ "${origin:0:1}" != "/" ]; then
          origin="$PWD/$path"
        fi

        if [[ "$origin" =~ ^$DOTFILES/ ]]; then
          target="$origin"
          origin=$( origin "$target" )
        fi

        if [ ! -e "$target" ]; then
          error "Path not found: {{$target}}"
          continue
        elif ! validate "$origin"; then
          continue
        fi

        if [ -L "$origin" ]; then
          local link=$( readlink "$origin" 2>/dev/null )
          if [ ! -e "$link" ]; then
            error "Broken symlink: {{$origin}} -> [1;36m$link[0m"
            force=1
          elif [[ "$link" =~ ^$DOTFILES/ ]]; then
            msg "Already symlinked: {{$origin}}"
            continue
          else
            msg "Already symlinked: {{$origin}} -> [1;36m$link[0m"
          fi
        fi

        if [ -L "$target" ]; then
          target=$( readlink -f "$target" )
        fi

        if [ -e "$origin" ] || [ -L "$origin" ]; then
          local ask="ask"
          local question="Delete {{$origin}} and install symlink?"
        else
          local ask="ask-yes"
          local question="Install symlink for {{$origin}}?"
        fi

        if [ $force -eq 1 ] || $ask "$question"; then
          if [ -d "$origin" ]; then
            if ask "Delete {{$origin}}?"; then
              system rm -r "$origin"
            else
              ask-abort
            fi
          elif [ -e "$origin" ] || [ -L "$origin" ]; then
            system rm "$origin"
          fi

          local parent=$( dirname "$origin" )
          if [ ! -d "$parent" ]; then
            system mkdir -p "$parent"
          fi

          if [ ! -e "$origin" ] || [ "$DRYRUN" = 1 ] && system ln -s "$target" "$origin"; then
            status "Successfully installed {{$origin}}"
          else
            error "Error while installing {{$origin}}"
            continue
          fi
        fi
      done
      ;;
    # }}}
    add) # {{{
      [ $# -eq 0 ] && usage

      for path in "$@"; do
        local origin=$( readlink -f "$path" 2>/dev/null )
        local target=$( target "$origin" )
        local target_dir=$( dirname "$target" )

        if [ ! -e "$origin" ]; then
          abort "Path not found: {{$origin}}"
        elif ! validate "$origin"; then
          continue
        elif [ -L "$path" ]; then
          msg "Already symlinked: {{$path}}"
          continue
        elif [ -e "$target" ]; then
          run install "$target" "$origin"
          continue
        fi

        ask-yes "Add {{$origin}} to repository?" || continue

        if ( test -d "$target_dir" || system mkdir -p "$target_dir" ) \
          && system mv "$origin" "$target" \
          && system ln -s "$target" "$origin"
        then
          system rm -f "$target_dir/.skip"
          [ -O "$target" ] || system chown "$USER:${GROUPS[0]}" "$target"
          [ -d "$target" ] && system chmod g+s "$target"
          git add "$target"

          status "Successfully added {{$target}}"
          (( added++ ))
        else
          error "Error while converting path: {{$origin}}"
          continue
        fi
      done
      ;;
    # }}}

    sync) # {{{
      if git ignore-errors status -s | grep -q .; then
        output
        git status
        output
        ask-abort

        run commit-all
      fi

      output
      run pull

      if git status | grep -Fq "Your branch is ahead"; then
        output
        run push
      fi

      output
      ;;
    # }}}
    commit-all|ca) # {{{
      if [ "$1" = "-m" ]; then
        shift
        local message="$1"
        shift
      else
        local message="Sync dotfiles"
      fi

      status "{{Committing local changes...}}"
      git ignore-errors add -A .
      git ignore-errors commit -a -m "$message" "$@"
      ;;
    # }}}
    pull|up) # {{{
      local changes=$( git status -s --ignore-submodules )
      [ -n "$changes" ] && git stash save | grep -Fq "No local changes to save" && unset changes

      local current=$( git rev-parse HEAD )

      status "{{Merging remote changes...}}"
      load-key
      git pull "$@"

      [ -n "$changes" ] && git stash pop -q

      if [ "$( git rev-parse HEAD )" != "$current" ]; then
        status "{{Checking out submodules...}}"
        git checkout-submodules
        run build-all
      fi
      ;;
    # }}}
    push) # {{{
      load-key
      status "{{Pushing local changes...}}"
      git push -q "$@"
      ;;
    # }}}

    list|list-submodules) # {{{
      awk "/path = .*$1/ { print \$3 }" "$DOTFILES/.gitmodules" | sort
      ;;
    # }}}
    update|update-submodule) # {{{
      unset batch
      [ "$1" = '--batch' ] && local batch=1 && shift

      local submodule="$1"
      shift

      if [ ! -d "$DOTFILES/$submodule" ]; then
        submodule=$( run list "$submodule" | head -1 )
        if [ -z "$submodule" ]; then
          abort "Submodule not found: {{$submodule}}"
        fi
      fi

      cd "$DOTFILES/$submodule" || abort
      [ -e ".git" ] || abort "Not a git repository: .git"

      local old_commit=$( system git rev-parse HEAD )
      if ! dryrun; then
        local git_output=$(
          system git fetch -q origin 2>&1 &&
          system git reset -q --hard origin/HEAD 2>&1
        )
      fi
      local new_commit=$( system git rev-parse HEAD )

      if [ -n "$git_output" ]; then
        error "Error while updating {{$submodule}}:"
        output "\e[1;31m$git_output\e[0m" | sed -r 's/^/    /'
        output
      elif [ "$new_commit" != "$old_commit" ]; then
        local url=$( system git remote -v | grep -Eom1 'https?://[^ ]+' )
        [ -n "$url" ] && url=" [ {{$url}} ]"

        [ ! $batch ] && output
        status "Changes in {{$submodule}}$url:" 6
        quiet \
          || system git -c color.ui=always log --oneline --no-merges '@{1}..' \
          | sed -r 's/^/    /'
        output
      elif [ ! $batch ]; then
        status "No changes in {{$submodule}}"
      fi
      ;;
    # }}}
    update-all|sup) # {{{
      if [ -n "$1" ]; then
        local submodules=$( run list "$1" )
      else
        local submodules=$( run list | grep -vx asdf )
      fi

      output
      status "{{Updating submodules:}}"

      local tmpdir=$( mktemp -d "${TMPDIR:-/tmp}/dotfiles.XXXXXX" )

      output '     \e[1;36m[' -n

      for submodule in $submodules; do
        while [ "$( jobs -r | wc -l )" -gt 10 ]; do
          sleep 0.1
        done

        (
          run update-submodule --batch "$submodule" > "$tmpdir/${submodule//\//-}" 2>&1
          output '\e[0;36m=' -n
        ) &

        sleep 0.1
      done

      wait
      output '\e[1;36m]\e[0m'
      output

      if grep -q . "$tmpdir"/* 2>/dev/null; then
        system cat "$tmpdir"/*
        run build-all
      else
        warning "No updates found."
      fi

      system rm -rf "$tmpdir"
      output
      ;;
    # }}}

    build) # {{{
      local path="$1"
      local command="$2"
      shift 2

      if [ -z "$path" ] || [ -z "$command" ]; then
        usage
      elif [ ! -d "$DOTFILES/$path" ]; then
        warning "Build path {{$path}} does not exist." 5
        return
      fi

      warning "Building {{$path}} $( dryrun-message )"
      dryrun && return

      if ! ( cd "$DOTFILES/$path" && system "$command" "$@" ); then
        error "Error while building {{$path}}"
        ask-abort
      fi
      ;;
    # }}}
    build-all) # {{{
      run build vim/bundle/fzf ./install --bin
      ;;
    # }}}

    package|pkg) # {{{
      local name=${1:-default}
      local filter_apt='^(apt:)?[^:#]+$'

      if [ "$name" = "update" ] || [ "$name" = "up" ]; then
        shift
        run update-packages "$@"
        return
      elif [[ "$name" =~ ^(apt|asdf|gem|yarn|flatpak|firmware)$ ]]; then
        run update-packages "$name"
        return
      elif [[ "$name" =~ : ]]; then
        local filter="^${name##*:}:"
        local name="${name%%:*}"
        [ "$filter" = "^apt:" ] && filter="$filter_apt"
      else
        local filter="."
      fi

      local list="$DOTFILES/packages/$name"
      if [ ! -f "$list" ]; then
        abort "Can't find list '$list'"
      fi

      local packages=$( grep -E "$filter" "$list" )

      if dpkg -s xorg &>/dev/null; then
        [ -f "$list.desktop" ] && packages=$(
          echo "$packages"; grep -E "$filter" "$list.desktop"
        )
      else
        [ -f "$list.server" ] && packages=$(
          echo "$packages"; grep -E "$filter" "$list.server"
        )
      fi

      function get_packages {
        echo "$packages" | grep -E "$1" | sed 's/.*: //' | sort
      }

      local packages_apt=$( get_packages "$filter_apt" )
      local packages_gem=$( get_packages '^gem:' )
      local packages_yarn=$( get_packages '^yarn:' )
      local packages_pip=$( get_packages '^pip:' )
      local packages_flat=$( get_packages '^flatpak:' )

      function get_missing {
        if [ -n "$1" ]; then
          comm -23 <( echo "$1" ) <( echo "$2" | sort )
        fi
      }

      [ -n "$packages_apt" ] && local missing_apt=$(
        get_missing "$packages_apt" \
        "$( dpkg --get-selections | cut -f1 | cut -d: -f1 )"
      )

      [ -n "$packages_gem" ] && local missing_gem=$(
        get_missing "$packages_gem" \
        "$( gem list | awk '/\(/ { print $1 }' )"
      )

      [ -n "$packages_yarn" ] && local missing_yarn=$(
        get_missing "$packages_yarn" \
        "$( command ls ~/.config/yarn/global/node_modules 2>/dev/null)"
      )

      [ -n "$packages_pip" ] && local missing_pip=$(
        get_missing "$packages_pip" \
        "$( python3 -m pip -- freeze --system | cut -d= -f1 )"
      )

      [ -n "$packages_flat" ] && local missing_flat=$(
        get_missing "$packages_flat" \
        "$( flatpak list --columns=application | tail -n +1 )"
      )

      if [ -z "$missing_apt"  ] &&
         [ -z "$missing_gem"  ] && \
         [ -z "$missing_yarn" ] && \
         [ -z "$missing_pip"  ] && \
         [ -z "$missing_flat" ]; then
        return
      fi

      output
      status "{{Missing $name packages:}}"

      function list_packages {
        [ -n "$2" ] || return
        for package in $2; do
          output "    \\e[0;32m[$1] \\e[1;32m$package\\e[0m"
        done
      }

      list_packages apt     "$missing_apt"
      list_packages gem     "$missing_gem"
      list_packages yarn    "$missing_yarn"
      list_packages pip     "$missing_pip"
      list_packages flatpak "$missing_flat"

      output
      if ask-yes "{{Install?}}"; then
        function install_packages {
          [ -n "$1" ] || return
          mapfile -t packages <<< "${1/\\n/ }"
          shift

          output
          mux-wrap "$@" "${packages[@]}"
        }

        install_packages "$missing_apt"  sudo aptitude install
        install_packages "$missing_gem"  gem install
        install_packages "$missing_yarn" yarn global add
        install_packages "$missing_pip"  sudo python3 -m pip install --system --upgrade
        install_packages "$missing_flat" sudo flatpak install
      fi
      output
      ;;
    # }}}
    update-packages) # {{{
      local filter="$1"

      function update {
        local type="$1"
        shift

        if [ -n "$filter" ] && [ "$filter" != "$type" ]; then
          return
        elif [ "$filter" = "$type" ] || ask-yes "Update {{$type}} packages?"; then
          status "Running {{$*}}"
          if [ "$1" = "xdg-open" ]; then
            shift
            xdg-open "$@"
          else
            mux-wrap "$@"
          fi
          [ -n "$filter" ] || echo
        fi
      }

      update apt        'sudo aptitude update && sudo aptitude upgrade'
      update asdf       'asdf update && asdf plugin update --all && asdf install'
      update gem        'gem update && gem cleanup'
      update yarn       yarn global upgrade
      update flatpak    'sudo flatpak update && sudo flatpak uninstall --unused'
      update firmware   fwupdmgr update

      if command -v gnome-shell >/dev/null; then
        update gnome-shell xdg-open https://extensions.gnome.org/local
      fi
      ;;
    # }}}

    dconf) # {{{
      local action="$1"
      shift

      if [ -n "$1" ]; then
        local files=( "$@" )
      else
        local files=( "$DOTFILES"/dconf/*.ini )
      fi

      for file in "${files[@]}"; do
        local name=$( basename "$file" .ini )
        local path="/$( echo "$name" | tr . / )/"
        local file="$DOTFILES/dconf/$name.ini"

        if [ "$action" = "load" ]; then
          status "Loading {{$name}}"
          dconf load "$path" < "$file"
        elif [ "$action" = "dump" ]; then
          status "Dumping {{$name}}"

          if [ -f "$file" ] && grep -Fqx '# :skip-dump:' "$file"; then
            warning "Skipping {{$name}}"
            continue
          else
            local output=$( dconf dump "$path" )
          fi

          if [ -f "$file" ]; then
            local skipped_keys=$( grep '^#.*=$' "$file" |
              cut -d# -f2 |
              tr "\n" "|"
            )

            if [ -n "$skipped_keys" ]; then
              output=$(echo "$output" |
                sed -r "s/^(${skipped_keys%|}).*$/#\1/"
              )
            fi
          fi

          echo "$output" > "$file"
        else
          usage
        fi
      done
      ;;
    # }}}

    git) # {{{
      command="$1"
      shift
      git ignore-errors "$command" "$@"
      ;;
    *)
      git ignore-errors "$command" "$@"
      ;;
    # }}}
  esac
}

### main {{{

# find the dotfiles repository
if [ -z "$DOTFILES" ]; then
  if [ -d /etc/dotfiles ]; then
    DOTFILES=/etc/dotfiles
  elif [ -d ~/.dotfiles ]; then
    DOTFILES=~/.dotfiles
  else
    abort "Can't find repository in /etc/dotfiles or $HOME/.dotfiles, please set \$DOTFILES"
  fi
fi

# resolve symlinks
while [ -L "$DOTFILES" ]; do
  DOTFILES=$( readlink -f "$DOTFILES" )
done

if [ ! -f "$DOTFILES/bin/dotfiles" ]; then
  abort "Can't find dotfiles script in repository, please check your \$DOTFILES"
fi

COMMAND=
STATUS=0

# Parse arguments
while [ $# -gt 0 ]; do
  case "$1" in
    -f|--force)   FORCE=1;;
    -v|--verbose) VERBOSE=1;;
    -q|--quiet)   QUIET=1;;
    -n|--dry-run) DRYRUN=1; VERBOSE=1;;
       --path)    echo "$DOTFILES"; exit;;
    -*|help)      usage;;
    *)
      COMMAND=( "$@" )
      break
      ;;
  esac
  shift
done

if [ -v COMMAND ]; then
  run "${COMMAND[@]}"
  exit $STATUS
else
  usage
fi

### }}}
