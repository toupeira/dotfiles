#!/usr/bin/env ruby
# rubocop:disable Style/MutableConstant
# frozen_string_literal: true

require 'csv'
require 'fileutils'
require 'shellwords'
require 'open-uri'
require 'tzinfo'

FOLDER = '/slack/documents/Notes/Sammlungen'
ARGS = {}

# Helpers
# ----------------------------------------------------------------------

def usage
  warn 'Usage: sync-obsidian [ARGS]'
  warn ''
  warn 'Arguments:'
  warn '  -r <PATH|URL>.csv                   Import IMDb ratings export'
  warn '  -w <PATH|URL>.csv                   Import IMDb watchlist export'
  warn '  -g <PATH|URL>.csv                   Import Goodreads library export'
  warn '  -c TITLE ICON <PATH|URL>.ics        Import iCalendar file'
  warn ''
  exit 255
end

def next_arg
  arg = ARGV.shift
  usage if arg.nil?
  arg
end

while ARGV.first&.start_with?('-')
  case ARGV.shift
  when '-r' then ARGS[:ratings] = next_arg
  when '-w' then ARGS[:watchlist] = next_arg
  when '-g' then ARGS[:goodreads] = next_arg
  when '-c'
    ARGS[:calendar] = next_arg
    ARGS[:icon] = next_arg
    ARGS[:path] = next_arg
  else
    usage
  end
end

usage if ARGS.empty?

def count_csv(path)
  `grep -c . #{Shellwords.escape path}`.to_i - 1
end

def parse_csv(path)
  CSV.parse(URI.open(path), headers: true)
end

def write_markdown(path, lines)
  puts "  \e[0;33m- #{path}\e[0m"

  realpath = "#{FOLDER}/#{path}.md"
  FileUtils.mkdir_p(File.dirname(realpath))
  open(realpath, 'w') do |file|
    file.puts(lines.join("\n"))
  end
end

def format_table(*fields)
  format('| %s |', fields.map do |field|
    # Remove repeated whitespace, add space after commas, escape special characters
    field
      &.gsub(/  +/, ' ')
      &.gsub(/,([^ ])/, ', \1')
      &.gsub(/([#\|])/, '\\\\\1')
  end.join(' | '))
end

TZ = TZInfo::Timezone.get('Europe/Zurich')

def parse_time(time, options = nil)
  time = DateTime.parse(time)
  options ||= ''
  all_day = false

  if options.include?('VALUE=DATE')
    all_day = true
  elsif !options.include?("TZID=#{TZ.name}")
    time = TZ.to_local(time)
  end

  [time, all_day]
end

def generate_events(entry, time_range)
  events = []
  time = entry[:start]
  count = 0

  while time && time <= time_range.end
    if time_range.cover?(time.to_date)
      # Create a new event instance with the same properties but updated dates
      event = entry.dup
      event[:start] = time

      # Calculate end time based on duration of original event
      if entry[:end]
        duration = entry[:end] - entry[:start]
        event[:end] = time + duration
      end

      events << event
    end

    break unless entry[:rule]

    time = next_event(time, entry[:rule])
    count += 1

    # Stop if we've reached the count limit or created too many events
    break if entry[:rule][:count] && count >= entry[:rule][:count]
    break if count > 1000
  end

  events
end

def next_event(time, rule)
  time =
    case rule[:freq]
    when :yearly
      time.next_year(rule[:interval])
    when :monthly
      if rule[:byday]
        time = time.next_month(rule[:interval] - 1)
        month = time.month
        count = 0
        until time.month != month
          time = time.next_day(7)
          count += 1
          break if rule[:count] && count >= rule[:count]
        end
        time
      else
        time.next_month(rule[:interval])
      end
    when :weekly
      time.next_day(rule[:interval] * 7)
    when :daily
      time.next_day(rule[:interval])
    end

  return if rule[:until] && time > rule[:until]

  time
end

# IMDb
# ----------------------------------------------------------------------

MOVIES_HEADER = %(
| Title | Year | Type | Genre | Director | Runtime | IMDb Rating | My Rating | Added |
|-------|------|------|-------|----------|---------|-------------|-----------|-------|
).strip

def format_movie(movie)
  format_table(
    "[#{movie['Title']}](#{movie['URL']})",
    movie['Release Date'],
    movie['Title Type'],
    movie['Genres'],
    movie['Directors'],
    movie['Runtime (mins)']&.gsub(/$/, 'm'),
    movie['IMDb Rating']&.gsub(/$/, '/10'),
    movie['Your Rating']&.gsub(/$/, '/10'),
    movie['Date Rated'] || movie['Created'],
  )
end

if ARGS[:ratings]
  puts "\e[0;32m● Importing IMDb ratings... \e[1m(#{count_csv(ARGS[:ratings])})\e[0m"
  FileUtils.rm_f(Dir.glob("#{FOLDER}/Filme & TV/[1-9]*.md"))

  all_movies = parse_csv(ARGS[:ratings])
  movies_by_decade = all_movies.group_by { _1['Year'].sub(/^(\d{3}).*/, '\10s') }

  movies_by_decade.sort.each do |decade, movies|
    write_markdown(
      "Filme & TV/#{decade} (#{movies.size})",
      [MOVIES_HEADER] +
      movies.sort_by { [_1['Year'], _1['Title']] }.map do |movie|
        format_movie(movie)
      end,
    )
  end
end

if ARGS[:watchlist]
  puts "\e[0;32m● Importing IMDb watchlist... \e[1m(#{count_csv(ARGS[:watchlist])})\e[0m"
  FileUtils.rm_f(Dir.glob("#{FOLDER}/Filme & TV/Watchlist*.md"))

  movies = parse_csv(ARGS[:watchlist])
  write_markdown(
    "Filme & TV/Watchlist (#{movies.size})",
    [MOVIES_HEADER] +
    movies.sort_by { [_1['Release Date']&.to_i || 9999, _1['Created']] }.reverse.map do |movie|
      format_movie(movie)
    end,
  )
end

BOOKS_HEADER = %(
| Title | Year | Author | Added | Read | My Rating |
|-------|------|--------|-------|------|-----------|
).strip

def format_book(book)
  authors =
    if book['Additional Authors']
      [book['Author'], book['Additional Authors']].join(', ')
    else
      book['Author']
    end

  format_table(
    "[#{book['Title']}](https://www.goodreads.com/book/show/#{book['Book Id']})",
    book['Year Published'],
    authors,
    book['Date Added'],
    book['Date Read'],
    book['My Rating']&.gsub(/$/, '/5'),
  )
end

# Goodreads
# ----------------------------------------------------------------------

if ARGS[:goodreads]
  puts "\e[0;32m● Importing Goodreads library... \e[1m(#{count_csv(ARGS[:goodreads])})\e[0m"
  FileUtils.rm_f(Dir.glob("#{FOLDER}/Bücher/*.md"))

  all_books = parse_csv(ARGS[:goodreads])
  books_by_shelf = all_books.group_by { _1['Exclusive Shelf'] }

  books_by_shelf.sort.each do |shelf, books|
    shelf = shelf.gsub('-', ' ').capitalize
    write_markdown(
      "Bücher/#{shelf} (#{books.size})",
      [BOOKS_HEADER] +
      books.sort_by { _1['Date Read'] || _1['Date Added'] }.reverse.map do |book|
        format_book(book)
      end,
    )
  end
end

# Calendars
# ----------------------------------------------------------------------

if ARGS[:calendar]
  puts "\e[0;32m● Importing calendar...\e[0m"

  time_range = Range.new(DateTime.now - 30, DateTime.now + 180)
  entries = []
  current = nil
  skip = true
  add_to_description = false

  URI.open(ARGS[:path]).each_line do |line|
    case line.strip
    when 'BEGIN:VEVENT'
      entries << current = {}
      skip = false
      add_to_description = false
    when 'BEGIN:VALARM'
      skip = true
    end

    next if skip

    add_to_description = false if line.start_with?(/\w/)

    case line
    when /^SUMMARY:(.*)/
      current[:summary] = $1.chomp
    when /^DESCRIPTION:(.*)/
      current[:description] = $1.chomp.gsub(/\\[rn]/, "\n")
      add_to_description = true
    when /^ (.*)/
      current[:description] << $1.chomp.gsub(/\\[rn]/, "\n") if add_to_description
    when /^DTSTART(;[^:]+)?:(.*)/
      current[:start], current[:all_day] = parse_time($2, $1)
    when /^DTEND(;[^:]+)?:(.*)/
      current[:end], = parse_time($2, $1)
    when /^RRULE:(.*)/
      rule = Regexp.last_match(1).strip.split(';').to_h do |option|
        option.split('=').map(&:downcase).map(&:to_sym)
      end

      rule[:count] = rule[:count]&.to_s&.to_i
      rule[:interval] = rule[:interval]&.to_s&.to_i || 1
      rule[:until], = parse_time(rule[:until].to_s) if rule[:until]

      current[:rule] = rule
    end
  end

  entries = entries.flat_map { generate_events(_1, time_range) }
  entries.sort_by! { _1[:start] }
  entries.reverse!

  write_markdown("Kalender/#{ARGS[:calendar]}", entries.map do |entry|
    summary = entry[:summary].force_encoding('utf-8')
    summary.concat(" <small>`#{entry[:start].strftime('%H:%M')}`</small>") unless entry[:all_day]

    description = entry[:description]&.force_encoding('utf-8')
    description = "\n#{description.gsub(/^/, '  ')}" if description

    "- [ ] #{ARGS[:icon]&.sub(/$/, ' ')}#{summary} " \
      "%%(start:: #{entry[:start].iso8601})%%" \
      "%%(end:: #{entry[:end]&.iso8601})%%"
  end)
end

# rubocop:enable Style/MutableConstant
