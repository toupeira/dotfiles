#!/bin/bash

function msg {
  local msg=$1
  local color=${2:-2}
  local icon=${3:-ï„¦}

  echo -e " \e[1;3${color}m$icon \e[22m$msg\e[0m" >&2
}

root=$( git root 2>/dev/null )
if [ "$root" ]; then
  cd "$root" || exit 1
else
  msg "\e[1m$PWD is not a Git repository" 3
  exit 1
fi

label='files'
select=
commit=
dry_run=

while [ "${1:0:1}" = "-" ]; do
  case "$1" in
    -h|--h*)
      echo "Usage: git-edit [OPTIONS] [PATH/PATTERN/COMMIT..]"
      echo
      echo "  -m, --modified    Edit all modified files"
      echo "  -s, --staged      Edit staged files"
      echo "  -u, --unstaged    Edit unstaged files"
      echo "  -l, --last        Edit modified files from last commit"
      echo "  -f, --fzf         Select modified files to edit"
      echo
      echo "  -n, --dry-run     Only show files, don't edit"
      echo
      exit 255
      ;;

    -m|--modified) select='modified';;
    -s|--staged)   select='staged';;
    -u|--unstaged) select='unstaged';;
    -l|--last)
      select='commit'
      label='files from last commit'
      commit='HEAD'
      ;;

    -n|--dry-run) dry_run=1;;

    -f|--fzf)
      select='fzf'
      mapfile -t files < <(
        git -c color.ui=always status -s \
          | sort -k2 \
          | grep -vE "\[[0-9]+mD[^\w]+ " \
          | fzf --multi --tac \
          | sed -r 's/.* //'
      )

      [ "${#files[@]}" = 0 ] && exit 1
      ;;
  esac

  shift
done

if [ ! "$select" ]; then
  if [ $# -eq 0 ]; then
    if git unstaged | grep -q .; then
      select='unstaged'
    elif git staged | grep -q .; then
      select='staged'
    else
      select='commit'
      label='files from last commit'
      commit='HEAD'
    fi
  elif [ -f "$1" ]; then
    files=( "$@" )
  elif git rev-parse --verify "$1" &>/dev/null; then
    select='commit'
    commit=$1
    shift
  else
    mapfile -t files < <( fdfind . -t f | fzf --multi -1 -q "$*" )
    [ "${#files[@]}" = 0 ] && exit
  fi
fi

case "$select" in
  modified)
    label='modified files'
    mapfile -t files < <( git diff HEAD --name-only )
    ;;
  staged)
    label='staged files'
    mapfile -t files < <( git diff --cached --name-only )
    ;;
  unstaged)
    label='unstaged files'
    mapfile -t files < <( git ls-files --modified --others --exclude-standard )
    ;;
  commit)
    [ "$label" = 'files' ] && label="files from commit \e[1m$commit"
    mapfile -t files < <( git show "$commit" --name-only --pretty=format: )
    ;;
esac

if [ "${#files[@]}" = 0 ]; then
  msg "\e[1mNo $label" 3
  exit 1
elif [ ${#files[@]} -eq 1 ] && [ "$label" = "files" ]; then
  msg "Editing \e[1m${files[0]}"
else
  [ ${#files[@]} -eq 1 ] && label=${label//files/file}
  msg "Editing \e[1m${#files[@]} $label"
fi

if [ "$dry_run" ]; then
  echo "${files[@]}" | tr " " "\n"
elif [ "${#files[@]}" -gt 0 ]; then
  exec sensible-vim "${files[@]}"
fi
