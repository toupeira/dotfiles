# vim: ft=gitconfig foldmethod=marker foldlevel=0

# Core settings {{{

[core]
  pager = delta

[pager]
  branch = less -FX

[interactive]
  diffFilter = delta --color-only

[advice]
  pushUpdateRejected = false
  statusHints = false
  commitBeforeMerge = false
  resolveConflict = false
  waitingForEditor = false

[user]
  name = Markus Koller
  email = markus@snafu.ch
  signingKey = ~/.ssh/id_ed25519.pub

[gpg]
  format = ssh

[gpg.ssh]
  allowedSignersFile = ~/.ssh/allowed_signers

[includeIf "gitdir:~/src/denteo/"]
  path = config.denteo

[git-extras]
  default-branch = main

[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true

[color]
  ui = auto

[color "diff"]
  meta = yellow
  frag = magenta bold
  commit = yellow bold
  old = red bold
  new = green bold
  whitespace = red reverse

[delta]
  syntax-theme = Monokai Extended
  paging = always
  navigate = true
  tabs = 2

  plus-style = syntax "#15331d"
  plus-emph-style = bold syntax "#1d572d"
  minus-style = syntax "#401a1b"
  minus-emph-style = bold syntax "#80302f"

  commit-decoration-style = yellow ul
  file-style = bold blue
  file-decoration-style = blue ul

  hunk-header-style = magenta line-number
  hunk-header-decoration-style = magenta
  hunk-header-file-style = bold magenta
  hunk-header-line-number-style = bold magenta

  blame-format = " {commit:<8}  {author:<15.14} {timestamp:>15} "

  grep-file-style = bold green
  grep-line-number-style = magenta

# }}}
# Command settings {{{

[branch]
  sort = -committerdate

[checkout]
  defaultRemote = origin

[commit]
  gpgSign = true
  verbose = true

[diff]
  algorithm = histogram
  renames = copies
  mnemonicprefix = true
  ignoreSubmodules = dirty
  renameLimit = 10000

[difftool]
  prompt = false

[fetch]
  prune = true
  pruneTags = true

[init]
  defaultBranch = main

[log]
  abbrevCommit = true
  decorate = true

[merge]
  conflictstyle = zdiff3
  stat = true
  tool = nvimdiff

[mergetool]
  prompt = false
  keepBackup = false

[pull]
  rebase = true

[push]
  autoSetupRemote = true
  followTags = true

[rebase]
  autoSquash = true
  updateRefs = true
  stat = true

[stash]
  showPatch = true
  showStat = true

[submodule]
  fetchJobs = 0

[tag]
  gpgSign = true
  sort = version:refname

# }}}
# Aliases {{{

[alias]
  s = status -sb
  st = status
  sta = -c diff.ignoreSubmodules=none st
  modified = !git --no-pager diff HEAD --name-only
  staged = !git --no-pager diff --cached --name-only
  unstaged = ls-files --modified --others --exclude-standard
  ss = !git --no-pager show --stat
  show-fuller = show --format=fuller

  l = log --date=human-local --pretty=format:'%C(yellow)%h%Creset %C(green)[%ad]%Creset %C(037)%an:%Creset %C(white)%s%Creset%C(auto)%d%Creset'
  la = l --all
  lg = l --graph
  rl = reflog --date=format:'%F %T' --pretty=format:'%C(yellow)%h%Creset %C(037)%gD:%Creset %C(white)%gs%Creset%C(auto)%d%Creset'
  ls = "!cd ${GIT_PREFIX:-.} && git l --stat"
  ld = log -p --ext-diff
  ldf = ld --follow
  msg = show -s --pretty=%b

  di = diff
  dc = diff --cached
  ds = -c core.pager='less -FX' diff --stat
  dt = !git -c diff.external='difft --display inline'
  news = ds ORIG_HEAD..

  diffnav = "!f() { [ $# -eq 0 ] && set -- diff; git "$@" | diffnav; }; f"
  dn = diffnav

  b = rev-parse --abbrev-ref HEAD
  br = branch -vv
  bra = branch -vva
  cb = create-branch
  db = delete-branch
  bcontains = branch -a --contains

  co = checkout
  cm = !git switch $( git default-branch )
  cd = switch development
  switch-branch = "!f() { [ $# -gt 0 ] && exec git switch "$@"; branch=$( git branches 2>/dev/null | fzf +s --no-multi --prompt 'BranchesÂ» ' ) && git switch "$branch"; }; f"
  sb = switch-branch
  branches = "!git -c color.ui=always branch -a --sort=-committerdate | grep -Ev '(/HEAD|/(main|master))' | sed -r -e 's,^[\\* ]*,,' -e 's,remotes/[^/]+/,,'"
  default-branch = !(git symbolic-ref --short refs/remotes/origin/HEAD 2>/dev/null || git symbolic-ref --short refs/remotes/upstream/HEAD) | cut -d/ -f2-

  ap = !git add --intent-to-add . && git add -p
  all = add -A
  unstage = reset HEAD -p
  discard = restore -p

  ci = commit
  ca = ci -a
  amend = ci --amend
  reword = amend --only
  extend = amend --no-edit
  pick = cherry-pick
  fixup = !sha=$( git -c color.ui=always l -n 1000 | fzf +s --no-multi --prompt 'FixupÂ» ' ) && git commit --fixup "${sha%% *}"
  wip = "!git commit -m \"WIP: Changes in $( echo $( git diff --cached --name-only ) )\""
  initial = commit --allow-empty -m 'Initial commit'

  r = remote -v
  shallow = clone --depth 1

  up = pull
  pom = !git pull origin $( git default-branch )
  ff = merge --ff-only HEAD@{u}
  re = rebase
  ri = rebase -i
  rem = !git rebase $( git default-branch )
  rim = !git rebase -i $( git default-branch )
  rcontinue = rebase --continue
  rabort = rebase --abort
  solve = mergetool
  absorb = absorb
  absorb-and-rebase = absorb --and-rebase

  pu = push
  poof = pu --force-with-lease --force-if-includes
  puci = pu -o ci.skip

  sub = submodule
  checkout-submodules = submodule update -q --init
  cos = checkout-submodules
  list-submodules = "!f() { git config -f .gitmodules --get-regexp \"^submodule\\..*$1.*\\.path\" | cut -d\\  -f2 | sort; }; f"

  sts = stash push
  stp = stash pop
  std = "!git stash drop && git stl"
  stw = "!cd ${GIT_PREFIX:-.} && git stash show"
  stl = "!cd ${GIT_PREFIX:-.} && git --no-pager stash list"

  skip-lint = !LEFTHOOK=0 OVERCOMMIT_DISABLE=1 git

  # run commands inside the repository
  sh = "!f() { [ $# -gt 0 ] && \"$@\"; }; f"
  bash = "!f() { [ $# -gt 0 ] && bash -ic \"$@\"; }; f"
  rg = !rg
  fd = !fdfind --hidden
  rake  = !rake
  rails = !rails
  guard = !guard
  mux = !mux
  vi = !vi
  vim = !vim
  e = edit

  gui = !sensible-vim +Neogit
  g = gui

# }}}
