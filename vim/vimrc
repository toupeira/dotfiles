" Initialisation
" {{{

  augroup vimrc
    autocmd!
  augroup END

  let g:python3_host_prog = 'python3'

  " disable builtin plugins
  let g:skip_defaults_vim = 1
  let g:loaded_netrwPlugin = 1

  " set up pathogen
  if !exists('g:pathogen_disabled')
    let g:pathogen_disabled = []
  endif

  call add(g:pathogen_disabled, 'treesitter')
  call add(g:pathogen_disabled, 'treesitter-refactor')
  call add(g:pathogen_disabled, 'treesitter-textobjects')

  " only enable tmux plugins in tmux sessions
  if empty($TMUX)
    call add(g:pathogen_disabled, 'tmux-complete')
  endif

  " disable plugins that are broken in vscode-neovim
  if exists('g:vscode') " {{{
    call add(g:pathogen_disabled, 'airline')
    call add(g:pathogen_disabled, 'ale')
    call add(g:pathogen_disabled, 'bbye')
    call add(g:pathogen_disabled, 'context')
    call add(g:pathogen_disabled, 'deoplete')
    call add(g:pathogen_disabled, 'deoplete-spell')
    call add(g:pathogen_disabled, 'didyoumean')
    call add(g:pathogen_disabled, 'dirvish')
    call add(g:pathogen_disabled, 'dispatch')
    call add(g:pathogen_disabled, 'fzf')
    call add(g:pathogen_disabled, 'multiple-cursors')
    call add(g:pathogen_disabled, 'signify')
    call add(g:pathogen_disabled, 'searchlight')
    call add(g:pathogen_disabled, 'smoothie')
    call add(g:pathogen_disabled, 'startify')
    call add(g:pathogen_disabled, 'vista')
  endif " }}}

  " load bundle
  runtime bundle/pathogen/autoload/pathogen.vim
  call pathogen#infect()

" }}}

" Settings
" {{{

  " interface
  set termguicolors
  set updatetime=100
  set mouse=a
  set mousemodel=extend

  if !exists('g:vscode')
    syntax enable

    if $TERM == "linux"
      colorscheme ron
    else
      colorscheme custom
    endif
  endif

  " buffers
  set hidden
  set scrolloff=5
  set sidescrolloff=8
  set virtualedit+=block

  " windows
  set winheight=3
  set winminheight=3
  set splitbelow
  set splitright

  " line numbers and signs
  set number
  set numberwidth=6
  set signcolumn=yes

  " command prompt and status line
  set noshowmode
  set noruler
  set report=0
  set shortmess+=a
  set wildmode=longest:full,full

  " auto-completion
  set completeopt=menuone,noinsert
  set pumblend=10

  " indenting
  set ts=2 sts=2 sw=2
  set expandtab
  set shiftround

  " line wrapping
  set breakindent
  let &showbreak = ' •• '
  " set nolinebreak
  " let &breakat = ' 	'

  " searching
  set ignorecase
  set smartcase
  set inccommand=nosplit
  set iskeyword+=-

  if executable('rg')
    let &grepprg = "rg --vimgrep"
  endif

  " concealing
  set concealcursor=nvc
  set conceallevel=0

  " diffing
  set diffopt+=algorithm:histogram,indent-heuristic

  " folding
  set foldmethod=indent
  set foldlevel=99999

  " matching
  set showmatch

  " persistent undo
  set undofile

  " window title
  set title
  let &titlestring = "  %t%m%r\ [%{ProjectPath(1)}]"

  " highlight yanked region
  autocmd vimrc TextYankPost * silent! lua
    \ require'vim.highlight'.on_yank { timeout=100 }

  " show the project name and relative path to the current file
  function! ProjectPath(short) " {{{
    let l:root = substitute(getcwd(), '/\.git$', '', '')

    if !exists('b:git_dir')
      return substitute(l:root, '^' . $HOME, '~', '')
    else
      let l:project = fnamemodify(l:root, ':t')
      let l:path = fnamemodify(expand('%'), ':p:h')

      if a:short || winwidth(0) < 60
        " only return project name
        return l:project
      else
        " return project name with relative path
        let l:path = substitute(l:path, '^\(fugitive://\)\?' . substitute(l:root, '\~', '\\~', 'g') . '/\?', '', '')

        if empty(l:path)
          return l:project
        else
          return l:project . ': ' . l:path
        endif
      endif
    endif
  endfunction " }}}

" }}}

" Filetypes
" {{{

  autocmd vimrc FileType css,scss setlocal iskeyword+=%
  autocmd vimrc FileType make setlocal noexpandtab
  autocmd vimrc FileType text,markdown,mail setlocal linebreak suffixesadd+=.md
  autocmd vimrc FileType gitcommit,gitrebase setlocal colorcolumn=50,72
  autocmd vimrc FileType crontab setlocal nowritebackup
  autocmd vimrc FileType help nnoremap <buffer><silent> q :bd<CR>
  autocmd vimrc FileType org setlocal foldmethod=expr
  autocmd vimrc FileType qf setlocal nobuflisted
  autocmd vimrc FileType ruby setlocal iskeyword+=?,!
  autocmd vimrc FileType vim setlocal foldmethod=marker foldlevel=0

  " resize quickfix windows to their content, or 10 lines maximum
  autocmd vimrc FileType qf,ale-preview call <SID>ResizeWindow(2, 10)
  function! s:ResizeWindow(min, max) " {{{
    nnoremap <buffer><silent> q :bd<CR>
    if &ft == 'ale-preview'
      nnoremap <buffer><silent> ,E :bd<CR>
    endif
    let max = min([a:max, &lines / 3])
    execute max([a:min, min([max, line('$') + 1])]).'wincmd _'
  endfunction " }}}

  " start insert mode when committing
  function! s:CommitStartInsert() " {{{
    if getline(1) == ''
      normal O
      startinsert
    endif
  endfunction " }}}
  autocmd vimrc FileType gitcommit call <SID>CommitStartInsert()

  " terminals
  autocmd vimrc TermOpen * setlocal nonumber norelativenumber signcolumn=no | startinsert!
  autocmd vimrc TermClose * if !v:event.status && &ft != 'fzf' | bd | endif
  autocmd vimrc BufWinEnter,WinEnter term://* startinsert!
  autocmd vimrc BufWinLeave,WinLeave term://* stopinsert

  " ambience theme from terminator
  " {{{
  let g:terminal_color_0  = '#555753'
  let g:terminal_color_1  = '#ef2929'
  let g:terminal_color_2  = '#8ae234'
  let g:terminal_color_3  = '#fce94f'
  let g:terminal_color_4  = '#729fcf'
  let g:terminal_color_5  = '#ad7fa8'
  let g:terminal_color_6  = '#34e2e2'
  let g:terminal_color_7  = '#eeeeec'

  let g:terminal_color_8  = '#555753'
  let g:terminal_color_9  = '#ef2929'
  let g:terminal_color_10 = '#8ae234'
  let g:terminal_color_11 = '#fce94f'
  let g:terminal_color_12 = '#729fcf'
  let g:terminal_color_13 = '#ad7fa8'
  let g:terminal_color_14 = '#34e2e2'
  let g:terminal_color_15 = '#eeeeec'
  " }}}

" }}}

" Commands
" {{{

  " edit vimrc
  command! RC execute 'edit ' . system('realpath ' . $MYVIMRC)

  " abbreviate commands
  " http://vim.wikia.com/wiki/Replace_a_builtin_command_using_cabbrev
  command! -nargs=+ CommandAlias call <SID>CommandAlias(<f-args>)
  function! s:CommandAlias(abbreviation, expansion) " {{{
    execute 'cabbrev ' . a:abbreviation . ' <c-r>=getcmdpos() == 1 && getcmdtype() == ":" ? "' . a:expansion . '" : "' . a:abbreviation . '"<CR>'
endfunction " }}}

  CommandAlias E e
  CommandAlias E! e!
  CommandAlias Q q
  CommandAlias Q! q!
  CommandAlias QA qa
  CommandAlias Qa qa
  CommandAlias qA qa
  CommandAlias QA! qa!
  CommandAlias Qa! qa!
  CommandAlias qA! qa!
  CommandAlias WQ wq
  CommandAlias Wq wq
  CommandAlias wQ wq
  CommandAlias WQ! wq!
  CommandAlias Wq! wq!
  CommandAlias wQ! wq!

  " open markdown preview
  command! -nargs=0 VMD execute 'silent !vmd % &>/dev/null &' | redraw!

  " helper to preserve current search and cursor position
  command! -nargs=1 Preserve call <SID>Preserve(<args>)
  function! s:Preserve(command) " {{{
    let search=@/
    let line = line('.')
    let column = col('.')
    execute a:command
    let @/ = search
    call cursor(line, column)
  endfunction " }}}

" }}}

" Keybindings
" {{{

  " horizontal movements
  noremap H ^
  noremap L $

  " toggle folds with Space
  nnoremap <Space> za

  " apply macros with Q (disables the default Ex mode shortcut)
  nnoremap Q @q
  vnoremap Q :norm @q<CR>

  " shortcut for desktop clipboard
  noremap + "+

  " don't use exact searches for */#
  noremap * g*
  noremap # g#
  noremap g* *
  noremap g# #

  " break undo chain on new lines
  inoremap <CR> <C-g>u<CR>

  " don't map Y to y$
  nunmap Y

  " sort the selection
  vnoremap <silent> gs :sort l<CR>

  " duplicate the selection
  vnoremap D y`]pgv

  " repeat command for each line in selection
  xnoremap . :normal .<CR>

  " shortcuts for diff
  nnoremap du :diffupdate<CR>

  " map Ctrl+C to Escape
  inoremap <C-c> <Esc>
  autocmd vimrc CmdWinEnter * nnoremap <buffer> <C-c> :

  " delete to black hole register with X
  noremap X "_d
  nnoremap XX "_dd

  " keep cursor position when yanking in visual mode
  xnoremap <silent><expr> y "ygv" . mode()

  " reselect visual block after indent
  xnoremap <silent> > >gv
  xnoremap <silent> < <gv

  " select pasted text
  nmap vp `[v`]

  " switch to alternate buffer
  nnoremap <silent><expr> ,<Tab> empty(getreg('#')) \|\| !buflisted(getreg('#')) ? ':bnext<CR>' : '<C-^>'

  " terminal mappings
  tnoremap <Esc> <C-\><C-n>

  " don't open tags with Ctrl-LeftClick
  noremap <C-LeftMouse> <nop>
  noremap! <C-LeftMouse> <nop>

  " navigate windows/tmux panes with Ctrl+jkhl
  function! TmuxNavigate(cmd) " {{{
    let nr = winnr()

    execute('wincmd ' . a:cmd)

    if (empty($TMUX))
      return
    elseif (nr != winnr())
      return
    endif

    let pane = str2nr(system('tmux display -p "#{pane_index}"'))
    let panes = str2nr(system('tmux display -p "#{window_panes}"'))

    if (((a:cmd == 'k' || a:cmd == 'h') && nr == 1 && pane == 1) ||
          \ ((a:cmd == 'j' || a:cmd == 'l') && nr == winnr('$') && pane == panes))
      " silent call system('tmux resize-pane -Z')
    else
      let arg = tr(a:cmd, 'hjkl', 'LDUR')
      silent call system('tmux select-pane -' . arg)
    endif
  endfunction " }}}

  nnoremap <silent> <c-h> :call TmuxNavigate('h')<CR>
  nnoremap <silent> <c-j> :call TmuxNavigate('j')<CR>
  nnoremap <silent> <c-k> :call TmuxNavigate('k')<CR>
  nnoremap <silent> <c-l> :call TmuxNavigate('l')<CR>

  tnoremap <silent> <c-h> <C-\><C-n>:call TmuxNavigate('h')<CR>
  tnoremap <silent> <c-j> <C-\><C-n>:call TmuxNavigate('j')<CR>
  tnoremap <silent> <c-k> <C-\><C-n>:call TmuxNavigate('k')<CR>
  tnoremap <silent> <c-l> <C-\><C-n>:call TmuxNavigate('l')<CR>

  " alias Ctrl-v as Ctrl-q
  noremap <C-q> <C-v>
  inoremap <C-q> <C-v>
  cnoremap <C-q> <C-v>

  " Copy & Paste shortcuts
  vnoremap <C-c> "+ygv<Esc>
  vnoremap <C-x> "+d<Esc>

  noremap <C-v>  "+gP
  cnoremap <C-v> <C-r>+

  exe 'inoremap <script> <C-v>' paste#paste_cmd['i']
  exe 'vnoremap <script> <C-v>' paste#paste_cmd['v']

  " Ctrl-g - copy current filename to clipboard
  nnoremap <silent> <C-g> :let @+ = expand('%:.') . ':' . line('.')<CR><C-g>

  " ,q and ,e - toggle quickfix window and location list
  nnoremap <silent> ,q :call <SID>ToggleList('c')<CR>
  nnoremap <silent> ,e :call <SID>ToggleList('l')<CR>
  function! s:ToggleList(command) " {{{
    let windows = winnr('$')
    exec(a:command.'close')
    if windows != winnr('$')
      return
    endif

    if a:command == 'c' && !len(getqflist())
      echohl Question
      echo "Quickfix list is empty."
      return
    elseif a:command == 'l' && !len(getloclist(0))
      echohl Question
      echo "Location list is empty."
      return
    endif

    let winnr = winnr()
    exec(a:command.'open')
    if winnr() != winnr
      wincmd p
    endif
  endfunction " }}}

  " Ctrl-c - remove highlighted search and redraw
  nnoremap <silent> <C-c> :nohlsearch<CR>:redraw!<CR>

  " ,1-9 - switch buffers
  for i in range(1, 9)
    execute "nnoremap <silent>  ," . i . " :b" . i . "<CR>"
  endfor

  " <count>` - switch buffers
  nnoremap <silent><expr> ` v:count ? ":<C-u>b<C-r>=v:count<CR><CR>" : "`"

  " <count>~ - delete buffers
  nnoremap <silent><expr> ~ v:count ? ":<C-u>bd<C-r>=v:count<CR><CR>" : "~"

  " ,n / ,p - next/previous buffer
  nnoremap <silent> ,n :bnext<CR>
  nnoremap <silent> ,p :bprevious<CR>

  " ,c - close current window
  nnoremap <silent> ,c :call <SID>CloseWindow()<CR>
  function! s:CloseWindow() " {{{
    if &buftype != 'quickfix'
      let windows = len(filter(
        \ range(1, winnr('$')),
        \ "getbufvar(winbufnr(v:val), '&buftype') != 'quickfix'"
      \ ))

      if windows == 1
        return
      endif
    endif

    close
  endfunction " }}}

  " ,x - close the current buffer, keeping windows
  nnoremap <silent> ,x :silent lclose<CR>:silent Bdelete<CR>

  " ,X - close the current buffer, not keeping windows
  nnoremap <silent> ,X :silent lclose<CR>:silent bd<CR>

  " ,d - open file in new split
  nmap <silent> ,d <C-w>f

  " ,s - split horizontally
  nnoremap <silent> ,s :split<CR>

  " ,v - split vertically
  nnoremap <silent> ,v :vsplit<CR>

  " ,w - write current buffer
  nnoremap <silent> ,w :write<CR>:redraw<CR>

  " ,N - toggle line numbers
  nnoremap <silent> ,N :call <SID>ToggleLineNumbers()<CR>
  function! s:ToggleLineNumbers() " {{{
    if &number
      set nonumber norelativenumber
    else
      set number norelativenumber
    endif
  endfunction " }}}

" }}}

" Plugin Settings
" {{{

  " fugitive {{{
  nnoremap <silent> ,gs :G<CR>
  nnoremap <silent><expr> ,gl empty(expand('%')) ? ':Gclog<CR>' : ':Gclog %<CR>'
  vnoremap <silent> ,gl :Glog<CR>
  noremap  <silent> ,gL :Gclog<CR>
  nnoremap <silent> ,gd :silent Git -p log -p %<CR>
  noremap  <silent> ,gb :Git blame --date human-local<CR>
  noremap  <silent> ,gu :.GBrowse!<CR>
  noremap  <silent> ,gU :.GBrowse<CR>

  autocmd vimrc User FugitiveIndex setlocal nobuflisted|nmap <buffer><silent> q gq|nmap <buffer><silent> <space> =
  autocmd vimrc User FugitiveObject nmap <buffer><silent> q :cclose<CR>:bd<CR>
  autocmd vimrc User FugitivePager if maparg('gq', 'n')!=''|nmap <buffer><silent> q gq|endif

  let g:fugitive_gitlab_domains = ['https://git.panter.ch']
  " }}}

  " dirvish {{{
  autocmd vimrc FileType dirvish nmap <buffer> <silent> q gq
  " }}}

  " markdown {{{
  " https://github.com/tpope/vim-markdown
  let g:markdown_recommended_style = 0

  " https://github.com/preservim/vim-markdown
  let g:vim_markdown_folding_disabled = 0
  let g:vim_markdown_folding_style_pythonic = 1
  let g:vim_markdown_frontmatter = 1
  let g:vim_markdown_new_list_item_indent = 2
  let g:vim_markdown_strikethrough = 1
  " }}}

  " dispatch {{{
  let g:dispatch_no_maps = 1
  let g:dispatch_handlers = [ 'job' ]
  " }}}

  " json {{{
  let g:vim_json_syntax_conceal = (&conceallevel > 0)
  let g:vim_json_syntax_concealcursor = &concealcursor
  " }}}

  " devicons {{{
  let g:webdevicons_enable_airline_statusline = 0
  let g:webdevicons_enable_airline_tabline = 0
  " }}}

  " vista {{{
  if index(g:pathogen_disabled, 'vista') == -1
    nnoremap <silent> ,t :Vista finder<CR>
    nnoremap <silent> ,T :Vista!!<CR>

    autocmd vimrc VimEnter * call vista#RunForNearestMethodOrFunction()

    let g:vista_sidebar_width = 40
    let g:vista_blink = [1, 100]
    let g:vista_icon_indent = ["● ", "▶ "]
    let g:vista_fzf_preview = ['right,50%,hidden']

    let g:vista_default_executive = 'ctags'
    let g:vista_finder_alternative_executives = [ 'ctags' ]

    " let g:vista_executive_for = {
    "   \ 'sh': 'ale',
    "   \ 'javascript': 'ale',
    "   \ 'typescript': 'ale',
    "   \ 'ruby': 'ale'
    " \ }
  endif
  " }}}

  " pasta {{{
  let g:pasta_disabled_filetypes = ['qf', 'fugitiveblame']
  " }}}

  " reply {{{
  nnoremap <silent> ,! :botright Repl<CR>
  nnoremap <silent> ,` :botright Repl bash --login<CR>
  noremap <silent> ,> :ReplSend<CR>
  noremap <silent> ,< :ReplRecv<CR>

  let g:reply_termwin_max_height = 12

  function! s:reply_bash() abort
    let repl = reply#repl#base('bash', {
      \ 'prompt_start': '^[^[]\+ \[[^[]\+]\( ❰.*❱\)\? ',
      \ 'prompt_continue': '^ *» ',
    \ })

    function! repl.get_command() abort
      return ['bash', '--login']
    endfunction

    return repl
  endfunction

  function! s:reply_ruby() abort
    return reply#repl#base('pry', {
      \ 'prompt_start': '^\[\d\+] pry\(\[[^]]\+\]\)\? » ',
      \ 'prompt_continue': '^ *» ',
    \ })
  endfunction

  let g:reply_repls = {
    \ 'sh': [function('s:reply_bash')],
    \ 'vim': [function('s:reply_bash')],
    \ 'ruby': [function('s:reply_ruby')],
  \ }
  " }}}

  " ragtag {{{
  imap <C-]> </<Plug>ragtagHtmlComplete
  autocmd vimrc User Ragtag iunmap <buffer> <C-v>%
  autocmd vimrc User Ragtag iunmap <buffer> <C-v>&
  " }}}

  " rooter {{{
  let g:rooter_change_directory_for_non_project_files = 'current'
  let g:rooter_cd_cmd = 'lcd'
  let g:rooter_silent_chdir = 1
  let g:rooter_patterns = [
    \ 'elm-package.json',
    \ 'ng-package.json',
    \ 'package.json',
    \ 'go.mod',
    \ 'mix.exs',
    \ 'Gemfile',
    \ 'Rakefile',
    \ '.git',
    \ '.git/',
  \ ]
  " }}}

  " tabular {{{
  noremap <silent> ,a :Tabular /
  noremap <silent> ,a{ :Tabular /{<CR>
  noremap <silent> ,a} :Tabular /}<CR>
  noremap <silent> ,a[ :Tabular /[<CR>
  noremap <silent> ,a] :Tabular /]<CR>
  noremap <silent> ,a\| :Tabular /\|<CR>
  noremap <silent> ,a> :Tabular /-><CR>
  noremap <silent> ,a= :Tabular /\(\|\|\)\?=\+>\?<CR>
  noremap <silent> ,a, :Tabular /,\zs/l0r1<CR>
  noremap <silent> ,a: :Tabular /[^:]:\s\zs/l0r1<CR>

  autocmd vimrc FileType markdown noremap <silent><buffer> ,a\| :silent TableFormat<CR>
  " }}}

  " ale {{{
  if index(g:pathogen_disabled, 'ale') == -1
    nnoremap <silent> ,E :ALEDetail<CR>

    hi! link ALEVirtualTextError Error
    hi! link ALEVirtualTextWarning WarningMsg

    let g:ale_use_neovim_diagnostics_api = 0

    let g:ale_sign_error = '🔥'
    let g:ale_sign_warning = '⚠️'
    let g:ale_sign_info = '💧'

    let g:ale_lint_on_insert_leave = 1
    let g:ale_lint_on_text_changed = 'normal'

    let g:ale_set_balloons = 0
    let g:ale_virtualtext_cursor = 1
    let g:ale_virtualtext_prefix = '→ '

    let g:ale_linters = {
      \ 'ruby': [ 'ruby', 'rubocop' ],
      \ 'javascript': [ 'eslint' ],
      \ 'typescript': [ 'tslint' ]
    \ }

    let g:ale_fix_on_save = 1
    let g:ale_fix_on_save_ignore = ['rubocop']
    let g:ale_fixers = {
      \ 'javascript': ['prettier'],
      \ 'ruby': ['rubocop'],
      \ 'vue': ['prettier'],
    \ }

    let g:ale_ruby_rubocop_auto_correct_all = 1
  endif
  " }}}

  " deoplete {{{
  if index(g:pathogen_disabled, 'deoplete') == -1
    let g:deoplete#enable_at_startup = 1

    " <Tab> - trigger and accept completion
    inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-y>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ deoplete#complete()

    function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~ '\s'
    endfunction

    " <CR> - reject completion and close popup
    inoremap <CR> <C-r>=(pumvisible() ? "<C-e>" : "")<CR><C-g>u<CR>
  endif
  " }}}

  " neco-syntax {{{
  let g:necosyntax#max_syntax_lines = 500
  " }}}

  " airline {{{
  if index(g:pathogen_disabled, 'airline') == -1
    let g:airline_powerline_fonts = 1
    let g:airline_inactive_collapse = 0
    let g:airline_detect_paste = 0
    let g:airline_detect_iminsert = 0
    let g:airline_detect_spell = 0

    let g:airline#extensions#hunks#enabled = 0
    let g:airline#extensions#keymap#enabled = 0
    let g:airline#extensions#searchcount#enabled = 0
    let g:airline#extensions#whitespace#enabled = 0
    let g:airline#extensions#wordcount#enabled = 0

    let g:airline#extensions#ale#show_line_numbers = 0
    let g:airline#extensions#ale#error_symbol = ''
    let g:airline#extensions#ale#warning_symbol = ''
    let g:airline#extensions#ale#checking_symbol = ''

    let g:airline#extensions#branch#displayed_head_limit = 24
    let g:airline#extensions#branch#format = 2
    let g:airline#extensions#branch#vcs_checks = []

    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#buffers_label = ''
    let g:airline#extensions#tabline#tabs_label = 'tabs'
    let g:airline#extensions#tabline#overflow_marker = ' … '
    let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
    let g:airline#extensions#tabline#buffer_nr_show = 1
    let g:airline#extensions#tabline#buffer_min_count = 2
    let g:airline#extensions#tabline#fnamemod = ':t'
    let g:airline#extensions#tabline#fnamecollapse = 0

    if !exists('g:airline_symbols')
      let g:airline_symbols = {}
    endif

    " add space after readonly symbol
    call airline#init#bootstrap()
    let g:airline_symbols.readonly .= ' '

    let g:airline_mode_map = {
      \ '__' : '#',
      \ 'n'  : 'n',
      \ 'i'  : 'i',
      \ 'ic' : 'i',
      \ 'ix' : 'i',
      \ 'R'  : 'r',
      \ 'v'  : 'v',
      \ 'V'  : 'V',
      \ 'c'  : 'c',
      \ '' : '^v',
      \ 's'  : 's',
      \ 'S'  : 'S',
      \ '' : 's•b',
      \ }

    let g:airline#extensions#default#section_truncate_width = {
      \ 'b': 80
    \ }

    " show file directory separately from file name
    call airline#parts#define_raw('file', '%t%m')
    call airline#parts#define_raw('filepath', '%#airline_filepath#[%<%{ProjectPath(0)}]')
    let g:airline_section_c = airline#section#create(['file', g:airline_symbols.space, 'readonly', 'filepath'])

    hi! link airline_filepath          airline_c_inactive_bold
    hi! link airline_filepath_inactive airline_c_inactive

    " switch filetype and format/encoding, and only show
    " file format and encoding if it's not the default
    autocmd vimrc User AirlineAfterInit
      \ let g:airline_section_x = airline#section#create([
        \ 'vista',
        \ "%{&ff == 'unix' ? '' : '  ' . WebDevIconsGetFileFormatSymbol()}%{&fenc == 'utf-8' ? '' : '   ' . &fenc}"
      \ ])
    autocmd vimrc User AirlineAfterInit
      \ let g:airline_section_y = airline#section#create(['%{WebDevIconsGetFileTypeSymbol()} %{&ft}'])

    " tweak file position, don't show percentage
    let g:airline_symbols.linenr = ''
    let g:airline_symbols.maxlinenr = ''
    let g:airline_symbols.colnr = ':'
    let g:airline_section_z = airline#section#create(['linenr', '/%L', ':%#__accent_bold#%v'])
  endif
  " }}}

  " fzf {{{
  if index(g:pathogen_disabled, 'fzf') == -1
    let g:fzf_layout = { 'window': 'enew' }
    let g:fzf_action = { 'ctrl-s': 'split', 'ctrl-v': 'vsplit' }

    nnoremap <silent> ,f :Files<CR>
    nnoremap <silent> ,F :Files <C-r>=expand('%:h')<CR>/<CR>
    nnoremap <silent> ,h :History<CR>
    nnoremap <silent> ,b :Buffers<CR>
    nnoremap <silent> ,l :BLines<CR>
    nnoremap <silent> ,L :Lines<CR>

    nnoremap <expr>   ,r ':Rg '.expand('<cword>')
    nnoremap <silent> ,R :RG<CR>

    nnoremap <silent> ,gm :GFiles?<CR>
    nnoremap <silent> ,gB :Branches<CR>
    nnoremap <silent> ,gP :Projects<CR>

    nnoremap <silent> ,: :History:<CR>
    nnoremap <silent> ,/ :History/<CR>
    nnoremap <silent> ,? :Maps<CR>

    " add :Branches command
    function! s:fzf_branches(line)
      let l:parser = split(a:line)
      let l:branch = l:parser[0]
      if l:branch ==? '*'
        let l:branch = l:parser[1]
      endif
      execute 'Git checkout ' . l:branch
      AirlineRefresh
    endfunction

    command! -bang -nargs=0 Branches
      \ call fzf#vim#grep(
      \   'git branches', 0, {
      \     'sink': function('s:fzf_branches'),
      \     'options': ['--prompt', 'Branches» ']
      \   }, <bang>0)

    " add :Projects command
    function! s:fzf_projects(project)
      exe 'lcd ' . trim(system('src --path')) . '/' . a:project
      AirlineRefresh
      Files
    endfunction

    command! -bang -nargs=0 Projects
      \ call fzf#vim#grep(
      \   ' src list -a', 0, {
      \     'sink': function('s:fzf_projects'),
      \     'options': ['--prompt', 'Projects» ']
      \    }, <bang>0)
  endif
  " }}}

  " signify {{{
  let g:signify_vcs_list = ['git']

  let g:signify_sign_add               = '+ '
  let g:signify_sign_delete            = '-'
  let g:signify_sign_delete_first_line = '^'
  let g:signify_sign_change            = '·'

  hi! link SignifySignAdd DiffAdd
  hi! link SignifySignChange DiffChange
  hi! link SignifySignDelete DiffDelete
  " }}}

  " didyoumean {{{
  let g:dym_use_fzf = 1
  " }}}

  " sandwich {{{
  runtime macros/sandwich/keymap/surround.vim

  xmap is <Plug>(textobj-sandwich-auto-i)
  xmap as <Plug>(textobj-sandwich-auto-a)
  omap is <Plug>(textobj-sandwich-auto-i)
  omap as <Plug>(textobj-sandwich-auto-a)
  " }}}

  " go {{{
  let g:go_get_update = 0
  let g:go_gopls_enabled = 0
  let g:go_template_autocreate = 0

  let g:go_highlight_extra_types = 1
  let g:go_highlight_operators = 1
  let g:go_highlight_functions = 1
  let g:go_highlight_function_parameters = 1
  let g:go_highlight_function_calls = 1
  let g:go_highlight_types = 1
  let g:go_highlight_fields = 1
  let g:go_highlight_variable_declarations = 1
  let g:go_highlight_variable_assignments = 1
  " }}}

  " matchup {{{
  let g:matchup_matchparen_offscreen = {
    \ 'method': 'popup',
    \ 'border': 'shadow'
  \ }
  let g:matchup_matchparen_deferred = 1
  " }}}

  " cycle {{{
  map <C-a> <Plug>CycleNext
  map <C-x> <Plug>CyclePrev
  noremap <Plug>CycleFallbackNext <C-a>
  noremap <Plug>CycleFallbackPrev <C-x>

  let g:cycle_no_mappings = 1

  let g:cycle_default_groups = [
    \ [[ '&&', '||' ]],
    \ [[ '+', '-' ]],
    \ [[ '+=', '-=' ]],
    \ [[ '==', '!=' ]],
    \ [[ '>', '<' ]],
    \ [[ '>=', '<=' ]],
    \ [[ 'above', 'below' ]],
    \ [[ 'active', 'inactive' ]],
    \ [[ 'add', 'remove' ]],
    \ [[ 'and', 'or' ]],
    \ [[ 'asc', 'desc' ]],
    \ [[ 'assert', 'refute' ]],
    \ [[ 'before', 'after' ]],
    \ [[ 'credit', 'debit' ]],
    \ [[ 'debug', 'info', 'warn', 'error', 'fatal' ]],
    \ [[ 'enable', 'disable' ]],
    \ [[ 'even', 'odd' ]],
    \ [[ 'exclude', 'include' ]],
    \ [[ 'first', 'last' ]],
    \ [[ 'forward', 'backward' ]],
    \ [[ 'get', 'set' ]],
    \ [[ 'height', 'width' ]],
    \ [[ 'horizontal', 'vertical' ]],
    \ [[ 'in', 'out' ]],
    \ [[ 'internal', 'external' ]],
    \ [[ 'left', 'right' ]],
    \ [[ 'max', 'min' ]],
    \ [[ 'next', 'previous' ]],
    \ [[ 'old', 'new' ]],
    \ [[ 'only', 'except' ]],
    \ [[ 'on', 'off' ]],
    \ [[ 'public', 'private' ]],
    \ [[ 'read', 'write' ]],
    \ [[ 'show', 'hide' ]],
    \ [[ 'staging', 'production' ]],
    \ [[ 'to', 'from' ]],
    \ [[ 'top', 'bottom' ]],
    \ [[ 'true', 'false' ]],
    \ [[ 'up', 'down' ]],
    \ [[ 'without', 'with' ]],
    \ [[ 'yes', 'no' ]],
  \ ]

  let g:cycle_default_groups += [
    \ [[ 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday' ]],
    \ [[ 'january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december' ]],
  \ ]

  let g:cycle_default_groups_for_ruby = [
    \ [[ 'build', 'create' ]],
    \ [[ 'class', 'module' ]],
    \ [[ 'else', 'elsif' ]],
    \ [[ 'get', 'post', 'put', 'patch' ]],
    \ [[ 'if', 'unless' ]],
    \ [[ 'present', 'blank' ]],
  \ ]

  let g:cycle_default_groups_for_eruby = g:cycle_default_groups_for_ruby
  let g:cycle_default_groups_for_haml = g:cycle_default_groups_for_ruby

  let g:cycle_default_groups_for_gitrebase = [
    \ [[ 'pick', 'reword', 'edit', 'squash', 'fixup', 'drop' ]],
  \ ]
  " }}}

  " startify {{{
  let g:startify_change_to_dir = 0
  let g:startify_update_oldfiles = 1
  let g:startify_files_number = 9
  let g:startify_custom_indices = map(range(1,9), 'string(v:val)')

  let g:startify_lists = []

  let s:cwd = fnamemodify(getcwd(), ':~')
  if s:cwd == '~'
    let g:startify_lists += [{ 'type': 'files', 'header': ['   Recent' ] }]
  else
    let g:startify_lists += [{ 'type': 'dir', 'header': ['   Recent in ' . s:cwd] }]
    f
  endif

  let g:startify_lists += [{ 'type': 'bookmarks', 'header': ['   Bookmarks'] }]

  let g:startify_bookmarks = [
    \ {'v': '~/.config/nvim/init.vim'},
    \ {'g': '~/.config/git/config'},
    \ {'t': '~/.config/tmux/tmux.conf'},
  \ ]

  let g:startify_ascii = [
    \ "      .            .",
    \ "    .,;'           :,.",
    \ "  .,;;;,,.         ccc;.",
    \ ".;c::::,,,'        ccccc:",
    \ ".::cc::,,,,,.      cccccc.",
    \ ".cccccc;;;;;;'     llllll.",
    \ ".cccccc.,;;;;;;.   llllll.",
    \ ".cccccc  ';;;;;;'  oooooo.",
    \ "'lllllc   .;;;;;;;.oooooo'",
    \ "'lllllc     ,::::::looooo'",
    \ "'llllll      .:::::lloddd'",
    \ ".looool       .;::coooodo.",
    \ "  .cool         'ccoooc.",
    \ "    .co          .:o:.",
    \ "      .           .'",
  \ ]

  let g:startify_custom_header = map(g:startify_ascii, '"   ".v:val')
  " }}}

  " multiple-cursors {{{
  let g:multi_cursor_exit_from_visual_mode = 1
  let g:multi_cursor_exit_from_insert_mode = 1
  let g:multi_cursor_quit_key = '<C-c>'
  " }}}

  " smoothie {{{
  let g:smoothie_base_speed = 20
  " }}}

  " ruby {{{
  let g:ruby_operators = 1
  let g:ruby_pseudo_operators = 1
  let g:ruby_no_expensive = 1

  let g:ruby_indent_block_style = 'do'
  let g:ruby_indent_assignment_style = 'variable'
  let g:ruby_indent_hanging_elements = 0

  hi! link rubyRailsARMethod Statement
  " }}}

  " definitive {{{
  nnoremap <silent> gd :call ALEFallback('ALEGoToDefinition', 'FindDefinition')<CR>zvzz
  nnoremap <silent> gD :call ALEFallback('ALEGoToDefinitionInSplit', 'SFindDefinition')<CR>zvzz

  let g:definitive_associated_filetypes = {
    \ 'eruby': 'ruby',
    \ 'haml': 'ruby',
    \ 'rspec': 'ruby',
    \ 'rspec.ruby': 'ruby',
    \ 'zsh': 'sh',
  \ }

  let g:definitive_definitions = {
    \ 'ruby': '\<\(\(def\|class\|module\|alias\)\s\+\(self\.\)\=%1\>\|%1\s*=\|\<\(alias_method\|attr_reader\|attr_accessor\|attribute\|serialize\|scope\|has_one\|has_many\|belongs_to\) :%1\>\)',
  \ }
  " }}}

  " vue {{{
  let g:vue_pre_processors = ['scss']
  " }}}

  " treesitter {{{
  if index(g:pathogen_disabled, 'treesitter') == -1
    lua <<EOF
      require'nvim-treesitter.configs'.setup {
        ensure_installed = {
          -- "bash",
          "css",
          "go",
          -- "html",
          "javascript",
          "json",
          -- "markdown",
          "ruby",
          "typescript",
          "vue",
          "yaml",
        },
        highlight = { enable = true },
        indent = { enable = true },
        textobjects = {
          select = {
            enable = true,
            keymaps = {
              ["af"] = "@function.outer",
              ["if"] = "@function.inner",
              ["ac"] = "@class.outer",
              ["ic"] = "@class.inner",
            },
          },
          move = {
            enable = true,
            goto_next_start = {
              ["]m"] = "@function.outer",
              ["]]"] = "@class.outer",
            },
            goto_next_end = {
              ["]M"] = "@function.outer",
              ["]["] = "@class.outer",
            },
            goto_previous_start = {
              ["[m"] = "@function.outer",
              ["[["] = "@class.outer",
            },
            goto_previous_end = {
              ["[M"] = "@function.outer",
              ["[]"] = "@class.outer",
            },
          },
        },
        refactor = {
          navigation = { enable = true },
          smart_rename = { enable = true },
        },
      }
EOF
  endif
  " }}}

  " better-whitespace {{{
  noremap <silent> ,$ :StripWhitespace<CR>

  let g:better_whitespace_ctermcolor = 235
  let g:better_whitespace_guicolor = '#333333'
  " }}}

" }}}
